{"version":3,"sources":["components/helpers.js","components/config.js","components/home.js","App.js","serviceWorker.js","index.js"],"names":["getPreviousDate","num","d","Date","setDate","getDate","month","getMonth","getFullYear","getCurrentTime","today","getHours","getMinutes","formatDate","date","getDataRegions","giorno","a","dataRegionsUrl","dataNationalUrl","dataProvincesUrl","dataWorldUrl","dataNoteUrl","dataRegioonsLatestUrl","axios","get","then","res","data","filter","obj","includes","getTopRegions","valore","result","dates","regione","totale_valore","bkColor","bordColor","sort","b","totale_positivi","slice","totale_ospedalizzati","deceduti","forEach","record","push","denominazione_regione","getDataProvinces","denominazione_provincia","getDataNational","dimessi_guariti","totale_casi","variazione_totale_positivi","tamponi","mese","nuoviPositivi","nuovi_positivi","getDataNotes","getDataCountries","fetch","response","json","worldData","country","confirmed","recovered","deaths","Object","keys","map","i","length","Content","Layout","Footer","Paragraph","Typography","TabPane","Tabs","home","props","state","startDate","moment","itemsRegions","itemsProvincies","itemsNotes","itemsWorls","totWorldConfirmed","totWorldRecovered","totWorldDeaths","totDimessi","totDeceduti","totCasi","totPositivi","totDimessiPrev","totDecedutiPrev","totCasiPrev","totPositiviPrev","varPositivi","varPositiviPrev","DataChart1","DataChart2","DataChart3","radarData","handleChange","bind","yesterday","toJSON","replace","sessionStorage","setItem","tot","setState","varTamponi","varTamponiPrev","labels","datasets","label","backgroundColor","borderColor","pointRadius","borderWidth","totalConfirmed","totalRecovered","totalDeaths","dateString","toString","format","subtract","e","target","value","columnsRegions","render","text","style","color","title","dataIndex","key","sorter","sortDirections","defaultSortOrder","columnsNotes","width","columnsCountries","className","position","zIndex","subTitle","extra","defaultValue","this","onChange","disabledDate","current","endOf","marginTop","orientation","gutter","xs","sm","md","lg","span","bordered","suffix","valueStyle","textAlign","strokeLinecap","strokeWidth","strokeColor","percent","toFixed","marginBottom","fontSize","defaultActiveKey","tab","dataSource","pagination","total","pageSize","hideOnSinglePage","layout","columns","size","rowKey","scroll","y","legend","display","options","scales","yAxes","ticks","min","max","stepSize","gridLines","borderDash","scaleLabel","xAxes","type","time","unit","unitStepSize","displayFormats","showHeader","Group","handleDataChange","right","Button","scale","angleLines","callback","backdropColor","href","rel","Component","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.49667317.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport {globalConfig} from \"./config\";\r\n\r\nexport function getPreviousDate(num) {\r\n    let d = new Date();\r\n    d.setDate(d.getDate() - num);\r\n    let month = d.getMonth() + 1;\r\n    return d.getFullYear() + '-' + (month < 10 ? '0' + month : '' + month) + '-' + (d.getDate() < 10 ? '0' + d.getDate() : '' + d.getDate());\r\n}\r\n\r\nexport function getCurrentTime() {\r\n    var today = new Date();\r\n    return (today.getHours() < 10 ? '0' + today.getHours() : + '' + today.getHours()) + \":\" + (today.getMinutes() < 10 ? '0' + today.getMinutes() : + '' + today.getMinutes());\r\n}\r\n\r\nexport function formatDate(date) {\r\n    let d = new Date(date);\r\n    let month = d.getMonth() + 1;\r\n    return (d.getDate() < 10 ? '0' + d.getDate() : '' + d.getDate()) + '/' + (month < 10 ? '0' + month : '' + month) + '/' + d.getFullYear();\r\n}\r\n\r\nexport async function getDataRegions(giorno) {\r\n    const {dataRegionsUrl} = globalConfig();\r\n\r\n    return axios.get(dataRegionsUrl)\r\n        .then(res => {\r\n            const obj = res.data;\r\n            return obj.filter(obj => obj.data.includes(giorno));\r\n        });\r\n}\r\n\r\nexport async function getTopRegions(valore) {\r\n    const {dataRegioonsLatestUrl} = globalConfig();\r\n    let result = [];\r\n    return axios.get(dataRegioonsLatestUrl)\r\n        .then(res => {\r\n            var obj = res.data;\r\n            let regione = [];  \r\n            let totale_valore = [];  \r\n            let bkColor = [];  \r\n            let bordColor = [];  \r\n            let sorted;\r\n            let dates;\r\n            if (valore === 'positivi') {\r\n                sorted = obj.sort((a, b) => b.totale_positivi - a.totale_positivi);\r\n                dates = sorted.slice(0,12)\r\n            } else if (valore === 'ricoverati') {\r\n                sorted = obj.sort((a, b) => b.totale_ospedalizzati - a.totale_ospedalizzati);\r\n                dates = sorted.slice(0,12)                   \r\n            } else if (valore === 'deceduti') {\r\n                sorted = obj.sort((a, b) => b.deceduti - a.deceduti);\r\n                dates = sorted.slice(0,12)                 \r\n            }\r\n\r\n            dates.forEach(record => {  \r\n                regione.push(record.denominazione_regione); \r\n                if (valore === 'positivi') {\r\n                    totale_valore.push(record.totale_positivi);\r\n                    bkColor.push('rgba(255, 170, 0, 0.2)')\r\n                    bordColor.push('rgba(255, 170, 0,1)')\r\n                } else if (valore === 'ricoverati') {\r\n                    totale_valore.push(record.totale_ospedalizzati);\r\n                    bkColor.push('rgba(230, 0, 0, 0.2)')\r\n                    bordColor.push('rgba(230, 0, 0, 1)')                    \r\n                } else if (valore === 'deceduti') {\r\n                    totale_valore.push(record.deceduti);\r\n                    bkColor.push('rgba(173, 173, 173, 0.2)')\r\n                    bordColor.push('rgba(173, 173, 173, 1)')                    \r\n                }\r\n                  \r\n            });                  \r\n            result.push(regione, totale_valore, bkColor, bordColor);\r\n            return result;            \r\n        });  \r\n}\r\n\r\nexport async function getDataProvinces(giorno) {\r\n    const {dataProvincesUrl} = globalConfig();\r\n\r\n    return axios.get(dataProvincesUrl)\r\n        .then(res => {\r\n            const obj = res.data;\r\n            return obj.filter(obj => obj.data.includes(giorno)).filter(obj => obj.denominazione_provincia !== 'In fase di definizione/aggiornamento');\r\n        });\r\n}\r\n\r\nexport async function getDataNational(giorno=0) {\r\n    const {dataNationalUrl} = globalConfig();\r\n    let result = [];\r\n    if (giorno !== 0) {\r\n        return axios.get(dataNationalUrl)\r\n            .then(res => {\r\n                const obj = res.data;\r\n                result.push(obj.filter(obj => obj.data.includes(giorno))[0].dimessi_guariti, obj.filter(obj => obj.data.includes(giorno))[0].deceduti, obj.filter(obj => obj.data.includes(giorno))[0].totale_casi, obj.filter(obj => obj.data.includes(giorno))[0].totale_positivi, obj.filter(obj => obj.data.includes(giorno))[0].variazione_totale_positivi, obj.filter(obj => obj.data.includes(giorno))[0].tamponi);\r\n                return result;\r\n            }); \r\n    } else {\r\n        return axios.get(dataNationalUrl)\r\n            .then(res => {\r\n                const obj = res.data;\r\n                let mese = [];  \r\n                let nuoviPositivi = [];   \r\n                let totale_positivi = [];  \r\n                let dimessi_guariti = [];  \r\n                let deceduti = [];\r\n                let tamponi = [];                                 \r\n                obj.forEach(record => {  \r\n                    mese.push(record.data);  \r\n                    nuoviPositivi.push(record.nuovi_positivi);  \r\n                    totale_positivi.push(record.totale_positivi);  \r\n                    dimessi_guariti.push(record.dimessi_guariti);  \r\n                    deceduti.push(record.deceduti);                      \r\n                    tamponi.push(record.tamponi);                      \r\n                });                  \r\n                result.push(mese, nuoviPositivi, totale_positivi, dimessi_guariti, deceduti, tamponi);\r\n                return result;\r\n            });        \r\n    }\r\n}\r\n\r\nexport async function getDataNotes() {\r\n    const {dataNoteUrl} = globalConfig();\r\n\r\n    return axios.get(dataNoteUrl)\r\n        .then(res => {\r\n            const obj = res.data;\r\n            return obj;\r\n        });\r\n}\r\n\r\nexport async function getDataCountries() {\r\n    const {dataWorldUrl} = globalConfig();\r\n    let result = [];\r\n\r\n    return fetch(dataWorldUrl)\r\n        .then(response => response.json())\r\n        .then(res => {\r\n            var worldData = { country: \"\", confirmed: 0, recovered: 0, deaths: 0 };\r\n            var worldArr = Object.keys(res).map(i => i);\r\n            \r\n            worldArr.forEach((country) => {\r\n                let obj = res[country];\r\n                obj = obj[obj.length - 1];\r\n                worldData = {\r\n                    country: country,\r\n                    confirmed: obj.confirmed,\r\n                    recovered: obj.recovered,\r\n                    deaths: obj.deaths,\r\n                }\r\n                result.push(worldData); \r\n            });     \r\n            return result;\r\n\r\n        });\r\n}\r\n\r\n","export function globalConfig() {\r\n    return {\r\n        dataNationalUrl: 'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-andamento-nazionale.json',\r\n        dataRegionsUrl: 'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-regioni.json',\r\n        dataProvincesUrl: 'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-province.json',\r\n        dataWorldUrl: 'https://pomber.github.io/covid19/timeseries.json',\r\n        dataNoteUrl: 'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-note.json',\r\n        dataRegioonsLatestUrl: 'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-regioni-latest.json'\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n// eslint-disable-next-line \r\nimport { Layout, Radio, Row, Col, Table, Tabs, Card, Statistic, BackTop, Typography, Divider, Progress, DatePicker, PageHeader } from 'antd';\r\nimport { formatDate, getDataRegions, getDataProvinces, getDataNational, getCurrentTime, getPreviousDate, getDataNotes, getDataCountries, getTopRegions } from \"./helpers\";\r\n\r\nimport { Line, Radar } from 'react-chartjs-2';\r\nimport moment from 'moment';\r\n\r\nconst { Content, Footer } = Layout;\r\nconst { Paragraph } = Typography;\r\nconst { TabPane } = Tabs;\r\n\r\nexport default class home extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            startDate: moment(),\r\n            today: moment(),\r\n            itemsRegions: [],\r\n            itemsProvincies: [],\r\n            itemsNotes: [],\r\n            itemsWorls: [],\r\n            totWorldConfirmed: 0,\r\n            totWorldRecovered: 0,\r\n            totWorldDeaths: 0,            \r\n            totDimessi: 0,\r\n            totDeceduti: 0,\r\n            totCasi: 0,\r\n            totPositivi: 0,\r\n            totDimessiPrev: 0,\r\n            totDecedutiPrev: 0,\r\n            totCasiPrev: 0,\r\n            totPositiviPrev: 0,\r\n            varPositivi: 0,\r\n            varPositiviPrev: 0,\r\n            DataChart1: {},\r\n            DataChart2: {},\r\n            DataChart3: {},\r\n            radarData: 'positivi',\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let today = null;\r\n        let yesterday = null;\r\n\r\n        if (getCurrentTime() < \"17:30\") {\r\n            today = getPreviousDate(1);\r\n            yesterday = getPreviousDate(2);\r\n        } else {\r\n            today = new Date().toJSON().slice(0, 10).replace(/-/g, '-');\r\n            yesterday = getPreviousDate(1);\r\n        }\r\n\r\n        sessionStorage.setItem(\"DATIAGGIORNATIAL\", formatDate(today));\r\n        \r\n        await getDataNational(today)\r\n            .then(tot => {\r\n                this.setState({\r\n                    totDimessi: tot[0],\r\n                    totDeceduti: tot[1],\r\n                    totCasi: tot[2],                    \r\n                    totPositivi: tot[3],\r\n                    varPositivi: tot[4],\r\n                    varTamponi: tot[5]\r\n                })\r\n            });\r\n\r\n        await getDataNational(yesterday)\r\n            .then(tot => {\r\n                this.setState({\r\n                    totDimessiPrev: tot[0],\r\n                    totDecedutiPrev: tot[1],\r\n                    totCasiPrev: tot[2],\r\n                    totPositiviPrev: tot[3],\r\n                    varPositiviPrev: tot[4],\r\n                    varTamponiPrev: tot[5]\r\n                })\r\n            });\r\n\r\n        await getDataRegions(today)\r\n            .then(data => {\r\n                this.setState({\r\n                    itemsRegions: data\r\n            })\r\n        });\r\n        \r\n        let radarData = 'positivi';\r\n        await getTopRegions(radarData)\r\n            .then(data => {\r\n                this.setState({\r\n                    DataChart3: {  \r\n                        labels: data[0],  \r\n                        datasets: [  \r\n                          {  \r\n                            label: 'Totale positivi',\r\n                            data: data[1],  \r\n                            backgroundColor: 'rgba(255, 170, 0, 0.2)',\r\n                            borderColor: 'rgba(255, 170, 0,1)',\r\n                            pointRadius: .5,\r\n                            borderWidth: 1.5,\r\n                          }  \r\n                        ]  \r\n                    }                     \r\n                })\r\n            });\r\n\r\n        await getDataProvinces(today)\r\n            .then(data => {\r\n                this.setState({\r\n                    itemsProvincies: data                   \r\n                })\r\n            }); \r\n\r\n        await getDataNational()\r\n            .then(tot => {\r\n                this.setState({\r\n                    DataChart1: {  \r\n                        labels: tot[0],  \r\n                        datasets: [  \r\n                          {  \r\n                            data: tot[1],  \r\n                            backgroundColor: 'rgba(255, 170, 0, 0.2)',\r\n                            borderColor: 'rgba(255, 170, 0,1)',\r\n                            pointRadius: .5,\r\n                            borderWidth: 1.5,\r\n                          }  \r\n                        ]  \r\n                    },\r\n                    DataChart2: {  \r\n                        labels: tot[0],  \r\n                        datasets: [  \r\n                            {  \r\n                                label: 'Totale positivi',\r\n                                data: tot[2],  \r\n                                backgroundColor: 'rgba(255, 170, 0, 0.2)',\r\n                                borderColor: 'rgba(255, 170, 0, 1)',\r\n                                pointRadius: .5,\r\n                                borderWidth: 1.5,\r\n                            },\r\n                            {  \r\n                                label: 'Dimessi Guariti',\r\n                                data: tot[3],  \r\n                                backgroundColor: 'rgba(76, 230, 0, 0.2)',\r\n                                borderColor: 'rgba(76, 230, 0, 1)',\r\n                                pointRadius: .5,\r\n                                borderWidth: 1.5,\r\n                            },\r\n                            {  \r\n                                label: 'Deceduti',\r\n                                data: tot[4],  \r\n                                backgroundColor: 'rgba(194, 194, 194, 0.2)',\r\n                                borderColor: 'rgba(194, 194, 194, 1)',\r\n                                pointRadius: .5,\r\n                                borderWidth: 1.5,\r\n                            }   \r\n                        ]  \r\n                    }                   \r\n                })\r\n            });         \r\n            \r\n        await getDataNotes(today)\r\n            .then(data => {\r\n                this.setState({\r\n                    itemsNotes: data\r\n                })\r\n            });\r\n           \r\n        await getDataCountries()\r\n            .then(data => {\r\n                    let totalConfirmed = 0;\r\n                    let totalRecovered = 0;\r\n                    let totalDeaths = 0;\r\n                    data.forEach(({ confirmed, recovered, deaths }) => {\r\n                      totalConfirmed += confirmed;\r\n                      totalRecovered += recovered;\r\n                      totalDeaths += deaths;\r\n                    });\r\n\r\n                this.setState({\r\n                    itemsWorls: data,\r\n                    totWorldConfirmed: totalConfirmed,\r\n                    totWorldRecovered: totalRecovered,\r\n                    totWorldDeaths: totalDeaths,\r\n                })\r\n            });\r\n            \r\n    }\r\n\r\n    handleChange(date, dateString) {\r\n        let today = dateString\r\n        let d = new Date();\r\n\r\n        if (d.getDate().toString() === date.format('D')) {\r\n            today = date.subtract(1, \"days\");\r\n            today = today.format(\"YYYY-MM-DD\");\r\n        }\r\n\r\n        getDataNational(today)\r\n            .then(tot => {\r\n                this.setState({\r\n                    totDimessi: tot[0],\r\n                    totDeceduti: tot[1],\r\n                    totCasi: tot[2],                    \r\n                    totPositivi: tot[3],\r\n                    varPositivi: tot[4],\r\n                    varTamponi: tot[5]\r\n                })\r\n            });\r\n\r\n        let yesterday = date.subtract(1, \"days\").format(\"YYYY-MM-DD\");\r\n\r\n        getDataNational(yesterday)\r\n            .then(tot => {\r\n                this.setState({\r\n                    totDimessiPrev: tot[0],\r\n                    totDecedutiPrev: tot[1],\r\n                    totCasiPrev: tot[2],\r\n                    totPositiviPrev: tot[3],\r\n                    varPositiviPrev: tot[4],\r\n                    varTamponiPrev: tot[5]\r\n                })\r\n            });\r\n        \r\n        getDataRegions(today)\r\n            .then(data => {\r\n                this.setState({\r\n                    itemsRegions: data\r\n                })\r\n            });\r\n        \r\n        getDataProvinces()\r\n            .then(data => {\r\n                this.setState({\r\n                    itemsProvincies: data\r\n                })\r\n            });        \r\n    }\r\n\r\n    handleDataChange(e) {\r\n        getTopRegions(e.target.value)\r\n            .then(data => {\r\n                this.setState({\r\n                    radarData: e.target.value,\r\n                    DataChart3: {  \r\n                        labels: data[0],  \r\n                        datasets: [  \r\n                        {  \r\n                            label: 'Totale ' + e.target.value,\r\n                            data: data[1],  \r\n                            backgroundColor: data[2],\r\n                            borderColor: data[3],\r\n                            pointRadius: .5,\r\n                            borderWidth: 1.5,\r\n                        }  \r\n                        ]  \r\n                    }                     \r\n                })\r\n            });\r\n\r\n    }\r\n\r\n    render() {\r\n        \r\n        const columnsRegions = [\r\n            {\r\n                render: text => <span style={{color: 'white'}}>{text}</span>,\r\n                title: 'Regione',\r\n                dataIndex: 'denominazione_regione',\r\n                key: 'denominazione_regione',\r\n                sorter: (a, b) => {\r\n                    if (a.denominazione_regione < b.denominazione_regione) {\r\n                        return -1;\r\n                    }\r\n                    if (a.denominazione_regione > b.denominazione_regione) {\r\n                        return 1;\r\n                    }\r\n                    //this.state.persons.sort(function(a, b){return b.totale_casi-a.totale_casi}\r\n                },\r\n                sortDirections: ['descend', 'ascend']\r\n            },\r\n            {\r\n                render: text => <span style={{color: '#e60000'}}>{text}</span>,\r\n                title: 'Totale casi',\r\n                dataIndex: 'totale_casi',\r\n                key: 'totale_casi',\r\n                defaultSortOrder: 'descend',\r\n                sorter: (a, b) => {\r\n                    if (a.totale_casi < b.totale_casi) {\r\n                        return -1;\r\n                    }\r\n                    if (a.totale_casi > b.totale_casi) {\r\n                        return 1;\r\n                    }\r\n                },\r\n                sortDirections: ['descend', 'ascend']\r\n            },\r\n            {\r\n                render: text => <span style={{color: '#ffaa00'}}>{text}</span>,\r\n                title: 'Totale positivi',\r\n                dataIndex: 'totale_positivi',\r\n                key: 'totale_positivi',\r\n                sorter: (a, b) => {\r\n                    if (a.totale_positivi < b.totale_positivi) {\r\n                        return -1;\r\n                    }\r\n                    if (a.totale_positivi > b.totale_positivi) {\r\n                        return 1;\r\n                    }\r\n                },\r\n                sortDirections: ['descend', 'ascend']\r\n            },\r\n            {\r\n                render: text => <span style={{color: '#ffaa00'}}>{text}</span>,\r\n                title: 'Nuovi positivi',\r\n                dataIndex: 'nuovi_positivi',\r\n                key: 'nuovi_positivi',\r\n                sorter: (a, b) => {\r\n                    if (a.nuovi_positivi < b.nuovi_positivi) {\r\n                        return -1;\r\n                    }\r\n                    if (a.nuovi_positivi > b.nuovi_positivi) {\r\n                        return 1;\r\n                    }\r\n                },\r\n                sortDirections: ['descend', 'ascend']\r\n            },\r\n            {\r\n                render: text => <span style={{color: '#4ce600'}}>{text}</span>,\r\n                title: 'Dimessi Guariti',\r\n                dataIndex: 'dimessi_guariti',\r\n                key: 'dimessi_guariti',\r\n                sorter: (a, b) => {\r\n                    if (a.dimessi_guariti < b.dimessi_guariti) {\r\n                        return -1;\r\n                    }\r\n                    if (a.dimessi_guariti > b.dimessi_guariti) {\r\n                        return 1;\r\n                    }\r\n                },\r\n                sortDirections: ['descend', 'ascend']\r\n            } ,\r\n            {\r\n                render: text => <span style={{color: '#adadad'}}>{text}</span>,\r\n                title: 'Deceduti',\r\n                dataIndex: 'deceduti',\r\n                key: 'deceduti',\r\n                sorter: (a, b) => {\r\n                    if (a.deceduti < b.deceduti) {\r\n                        return -1;\r\n                    }\r\n                    if (a.deceduti > b.deceduti) {\r\n                        return 1;\r\n                    }\r\n                },\r\n                sortDirections: ['descend', 'ascend']\r\n            } \r\n\r\n            // \r\n        ];\r\n\r\n        const columnsProvincies = [\r\n            {\r\n                title: 'Provincia',\r\n                dataIndex: 'denominazione_provincia',\r\n                key: 'denominazione_provincia',\r\n                sorter: (a, b) => {\r\n                    if (a.denominazione_provincia < b.denominazione_provincia) {\r\n                        return -1;\r\n                    }\r\n                    if (a.denominazione_provincia > b.denominazione_provincia) {\r\n                        return 1;\r\n                    }\r\n                },\r\n                sortDirections: ['descend', 'ascend']\r\n            },\r\n            {\r\n                title: 'Totale casi',\r\n                dataIndex: 'totale_casi',\r\n                defaultSortOrder: 'descend',\r\n                key: 'totale_casi',\r\n                sorter: (a, b) => {\r\n                    if (a.totale_casi < b.totale_casi) {\r\n                        return -1;\r\n                    }\r\n                    if (a.totale_casi > b.totale_casi) {\r\n                        return 1;\r\n                    }\r\n                },\r\n                sortDirections: ['descend', 'ascend']\r\n            }\r\n        ];         \r\n\r\n        const legend = {display:false}\r\n\r\n        const optionsChart1 = {\r\n            scales: {\r\n              yAxes: [{\r\n                ticks: { // \r\n                  min: 0, max: 45000, stepSize: 5000 },                                \r\n                gridLines: {\r\n                  color: \"rgb(84, 86, 89)\",\r\n                  borderDash: [2, 2],\r\n                },\r\n                scaleLabel: {\r\n                  display: true,\r\n                }\r\n              }],              \r\n                xAxes: [{\r\n                  gridLines: {\r\n                    color: \"rgb(84, 86, 89)\",\r\n                    borderDash: [2, 2],\r\n                  },                 \r\n                    type: 'time',\r\n                    time: {\r\n                      unit: 'month',\r\n                      unitStepSize: 1,                      \r\n                      displayFormats: {\r\n                        month: 'MMMM'\r\n                      }\r\n                  }\r\n                }]\r\n            }\r\n        }     \r\n\r\n        const optionsChart2 = {\r\n            legend: {\r\n                display: true,\r\n                position: 'bottom',\r\n\r\n              },            \r\n            scales: {\r\n              yAxes: [{\r\n                ticks: { // \r\n                  min: 0, max: 550000, stepSize: 50000 },                \r\n                gridLines: {\r\n                  color: \"rgb(84, 86, 89)\",\r\n                  borderDash: [2, 2],\r\n                },\r\n                scaleLabel: {\r\n                  display: true,\r\n                }\r\n              }],              \r\n                xAxes: [{\r\n                  gridLines: {\r\n                    color: \"rgb(84, 86, 89)\",\r\n                    borderDash: [2, 2],\r\n                  },                 \r\n                    type: 'time',\r\n                    time: {\r\n                      unit: 'month',\r\n                      unitStepSize: 1,                      \r\n                      displayFormats: {\r\n                        month: 'MMMM'\r\n                      }\r\n                  }\r\n                }]\r\n            }\r\n        } \r\n\r\n        const optionsChart3 = {\r\n            //startAngle: 90,\r\n            legend: {\r\n                display:false\r\n            },\r\n            title: {\r\n              display: false\r\n            },\r\n            scale: {\r\n                angleLines: {\r\n                    color: 'rgb(84, 86, 89)', // lines radiating from the center\r\n                    borderDash: [2, 2], \r\n                },\r\n                gridLines: {\r\n                    color: 'rgb(84, 86, 89)',\r\n                    borderDash: [2, 2],                 \r\n                  },                \r\n              ticks: {\r\n                callback: function() {return \"\"},\r\n                backdropColor: \"rgba(0, 0, 0, 0)\"\r\n              }\r\n            }\r\n        }\r\n\r\n        const columnsNotes = [\r\n            {\r\n                dataIndex: 'data',\r\n                defaultSortOrder: 'descend',\r\n                render: text => <span>{formatDate(text)}</span>,\r\n                key: 'data',\r\n                sorter: (a, b) => {\r\n                    if (a.data < b.data) {\r\n                        return -1;\r\n                    }\r\n                    if (a.data > b.data) {\r\n                        return 1;\r\n                    }\r\n                },\r\n                width: 100,\r\n            },\r\n            {\r\n                dataIndex: 'note',\r\n                key: 'note'\r\n            }\r\n        ];  \r\n        \r\n        const columnsCountries = [\r\n            {\r\n                render: text => <span style={{color: 'white'}}>{text}</span>,\r\n                title: 'Paese',\r\n                dataIndex: 'country',\r\n                key: 'country',\r\n                sorter: (a, b) => {\r\n                    if (a.country < b.country) {\r\n                        return -1;\r\n                    }\r\n                    if (a.country > b.country) {\r\n                        return 1;\r\n                    }\r\n                    //this.state.persons.sort(function(a, b){return b.totale_casi-a.totale_casi}\r\n                },\r\n                sortDirections: ['descend', 'ascend']\r\n            },\r\n            {\r\n                render: text => <span style={{color: '#e60000'}}>{text}</span>,\r\n                title: 'Totale confermati',\r\n                dataIndex: 'confirmed',\r\n                key: 'confirmed',\r\n                defaultSortOrder: 'descend',\r\n                sorter: (a, b) => {\r\n                    if (a.confirmed < b.confirmed) {\r\n                        return -1;\r\n                    }\r\n                    if (a.confirmed > b.confirmed) {\r\n                        return 1;\r\n                    }\r\n                },\r\n                sortDirections: ['descend', 'ascend']\r\n            },\r\n            {\r\n                render: text => <span style={{color: '#ffaa00'}}>{text}</span>,\r\n                title: 'Totale ricoverati',\r\n                dataIndex: 'recovered',\r\n                key: 'recovered',\r\n                sorter: (a, b) => {\r\n                    if (a.recovered < b.recovered) {\r\n                        return -1;\r\n                    }\r\n                    if (a.recovered > b.recovered) {\r\n                        return 1;\r\n                    }\r\n                },\r\n                sortDirections: ['descend', 'ascend']\r\n            },\r\n            {\r\n                render: text => <span style={{color: '#adadad'}}>{text}</span>,\r\n                title: 'Deceduti',\r\n                dataIndex: 'deaths',\r\n                key: 'deaths',\r\n                sorter: (a, b) => {\r\n                    if (a.deaths < b.deaths) {\r\n                        return -1;\r\n                    }\r\n                    if (a.deaths > b.deaths) {\r\n                        return 1;\r\n                    }\r\n                },\r\n                sortDirections: ['descend', 'ascend']\r\n            } \r\n\r\n            // \r\n        ]; \r\n\r\n        function disabledDate(current) {\r\n            // Can not select days before today and today\r\n            return current < moment('2020-02-25','YYYY-MM-DD') || current > moment().endOf('day');\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <BackTop />\r\n                <Layout className=\"layout\">\r\n                    <PageHeader style={{ position: 'fixed', zIndex: 1, width: '100%' }}\r\n                        className=\"site-page-header-responsive\"\r\n                        title=\"DATI COVID-19\"\r\n                        subTitle={\"Situazione Italia e Mondo\"} \r\n                        extra={[\r\n                            <span>Dati aggiornati al </span>,\r\n                            <DatePicker \r\n                                defaultValue={moment(this.state.today,'YYYY-MM-DD')}\r\n                                format={'YYYY-MM-DD'}\r\n                                onChange={this.handleChange} \r\n                                disabledDate={disabledDate}\r\n                                />,\r\n                        ]}                            \r\n                    />\r\n                    <Content className=\"site-layout\" style={{ marginTop: 75 }}>\r\n\r\n                        <Divider orientation=\"left\">Situazione Italia</Divider>\r\n\r\n                        <div className=\"card-container\">\r\n                            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                                <Col className=\"gutter-row\" span={6}>\r\n                                    <Card className=\"card-wrapper\" bordered={false}>\r\n                                        <Statistic\r\n                                            className=\"card-wrapper-statistic\"\r\n                                            title=\"Totale positivi\"\r\n                                            value={this.state.totPositivi}\r\n                                            suffix={<span> +{this.state.varPositivi}</span> }\r\n                                            valueStyle={{color: '#ffaa00', textAlign: 'center'}}\r\n                                        />\r\n                                        <Paragraph style={{textAlign: 'center'}}>\r\n                                            <Progress \r\n                                                strokeLinecap='square' \r\n                                                strokeWidth='15px'\r\n                                                strokeColor='#ffaa00' \r\n                                                percent={(this.state.totPositivi / this.state.totCasi * 100).toFixed(2)}\r\n                                            />\r\n                                        </Paragraph>\r\n                                    </Card>\r\n                                </Col>                                \r\n                                <Col className=\"gutter-row\" span={6}>\r\n                                    <Card className=\"card-wrapper\" bordered={false}>\r\n                                        <Statistic\r\n                                            title=\"Deceduti\"\r\n                                            value={this.state.totDeceduti}\r\n                                            suffix={<span> +{this.state.totDeceduti - this.state.totDecedutiPrev}</span> }\r\n                                            valueStyle={{color: '#adadad', textAlign: 'center' }}\r\n                                        />\r\n                                        <Paragraph style={{textAlign: 'center'}}>\r\n                                            <Progress \r\n                                                strokeLinecap='square' \r\n                                                strokeWidth='15px'\r\n                                                strokeColor='#adadad' \r\n                                                percent={(this.state.totDeceduti / this.state.totCasi * 100).toFixed(2)}\r\n                                            />\r\n                                        </Paragraph>\r\n                                    </Card>\r\n                                </Col>\r\n                                <Col className=\"gutter-row\" span={6}>\r\n                                    <Card className=\"card-wrapper\" bordered={false}>\r\n                                        <Statistic\r\n                                            title=\"Dimessi/Guariti\"\r\n                                            value={this.state.totDimessi}\r\n                                            suffix={<span> +{this.state.totDimessi - this.state.totDimessiPrev}</span> }\r\n                                            valueStyle={{color: '#4ce600', textAlign: 'center' }}\r\n                                        />\r\n                                        <Paragraph style={{textAlign: 'center'}}>\r\n                                            <Progress \r\n                                                strokeLinecap='square' \r\n                                                strokeWidth='15px'\r\n                                                strokeColor='#4ce600' \r\n                                                percent={(this.state.totDimessi / this.state.totCasi * 100).toFixed(2)} \r\n                                            />\r\n                                        </Paragraph>\r\n                                    </Card>\r\n                                </Col>\r\n                                <Col className=\"gutter-row\" span={6}>\r\n                                    <Card className=\"card-wrapper\" bordered={false} >\r\n                                        <Statistic\r\n                                            title=\"Totale casi\"\r\n                                            value={this.state.totCasi}\r\n                                            suffix={<div style={{textAlign: 'left'}}>\r\n                                                <p style={{marginBottom: '0.6em'}}> +{this.state.totCasi - this.state.totCasiPrev}</p> \r\n                                                <p style={{color: '#7c878e', fontSize: '12px'}}>Su {this.state.varTamponi - this.state.varTamponiPrev} Tamponi</p>\r\n                                            </div>}\r\n                                            valueStyle={{color: '#e60000', textAlign: 'center' }}\r\n                                        />\r\n                                        <Paragraph style={{textAlign: 'center'}}>\r\n                                        <Progress \r\n                                                strokeLinecap='square' \r\n                                                strokeWidth='15px'\r\n                                                strokeColor='#e60000' \r\n                                                percent={((this.state.totCasi - this.state.totCasiPrev) / (this.state.varTamponi - this.state.varTamponiPrev) * 100).toFixed(2)} \r\n                                            />\r\n                                        </Paragraph>\r\n                                    </Card>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n\r\n                        <div className=\"card-container\">\r\n                            <Row gutter={{xs: 8, sm: 16, md: 24, lg: 32}}>\r\n                                <Col className=\"gutter-row\" span={8}>\r\n                                    <Card className=\"card-wrapper\" bordered={false}>\r\n                                        <Tabs  defaultActiveKey=\"1\">  \r\n                                            <TabPane tab=\"REGIONI\" key=\"1\">\r\n                                                <Table\r\n                                                    dataSource={this.state.itemsRegions}\r\n                                                    pagination={{\r\n                                                        total: this.state.itemsRegions.length,\r\n                                                        pageSize: this.state.itemsRegions.length,\r\n                                                        hideOnSinglePage: true\r\n                                                    }}\r\n                                                    layout=\"fixed\"\r\n                                                    columns={columnsRegions}\r\n                                                    bordered\r\n                                                    size=\"middle\"\r\n                                                    rowKey=\"codice_regione\"\r\n                                                    scroll={{ y: 203 }} //456\r\n                                                />\r\n                                            </TabPane>\r\n                                            <TabPane tab=\"PROVINCE\" key=\"2\">\r\n                                                <Table\r\n                                                    dataSource={this.state.itemsProvincies}\r\n                                                    pagination={{\r\n                                                        total: this.state.itemsProvincies.length,\r\n                                                        pageSize: this.state.itemsProvincies.length,\r\n                                                        hideOnSinglePage: true\r\n                                                    }}\r\n                                                    layout=\"fixed\"\r\n                                                    columns={columnsProvincies}\r\n                                                    bordered\r\n                                                    size=\"middle\"\r\n                                                    rowKey=\"codice_provincia\"\r\n                                                    scroll={{ y: 203 }}\r\n                                                />\r\n                                            </TabPane>\r\n                                        </Tabs>\r\n                                    </Card>\r\n                                </Col>\r\n                                <Col className=\"gutter-row\" span={8}>\r\n                                    <Card className=\"card-wrapper\" bordered={false} title=\"Nuovi positivi\">\r\n                                        <Line data={this.state.DataChart1} legend={legend} options={optionsChart1}/>\r\n                                    </Card>\r\n                                </Col>\r\n                                <Col className=\"gutter-row\" span={8}>\r\n                                    <Card className=\"card-wrapper\" bordered={false} title=\"Andamento nazionale\">\r\n                                        <Line data={this.state.DataChart2} options={optionsChart2}/>\r\n                                    </Card>\r\n                                </Col>                                \r\n                            </Row>\r\n                        </div>\r\n\r\n                        <div className=\"card-container\">\r\n                            <Row gutter={{xs: 8, sm: 16, md: 24, lg: 32}}>\r\n                                <Col className=\"gutter-row\" span={8}>\r\n                                    <Card className=\"card-wrapper\" bordered={false}>\r\n                                        <Table\r\n                                            dataSource={this.state.itemsNotes}\r\n                                            pagination={{\r\n                                                total: this.state.itemsNotes.length,\r\n                                                pageSize: this.state.itemsNotes.length,\r\n                                                hideOnSinglePage: true\r\n                                            }}\r\n                                            //layout=\"fixed\"\r\n                                            showHeader={false}\r\n                                            columns={columnsNotes}\r\n                                            bordered\r\n                                            title={() => 'Note'}\r\n                                            size=\"small\"\r\n                                            //rowKey=\"date\"\r\n                                            scroll={{ y: 320 }} //456\r\n                                        />\r\n                                    </Card>\r\n                                </Col>\r\n                                <Col className=\"gutter-row\" span={8}>\r\n                                    <Card className=\"card-wrapper\" bordered={false} title={<span>12 Regioni con il maggior numero di {this.state.radarData}</span> }>\r\n                                        <Radio.Group value={this.state.radarData} onChange={this.handleDataChange.bind(this)} style={{ right: '0px' }}>\r\n                                            <Radio.Button value=\"positivi\">Positivi</Radio.Button>\r\n                                            <Radio.Button value=\"ricoverati\">Ricoverati</Radio.Button>\r\n                                            <Radio.Button value=\"deceduti\">Deceduti</Radio.Button>\r\n                                        </Radio.Group>\r\n                                        <Radar data={this.state.DataChart3} options={optionsChart3}/>\r\n                                    </Card>\r\n                                </Col>                             \r\n                            </Row>\r\n                        </div>    \r\n                        \r\n                        <Divider orientation=\"left\">Situazione Mondiale</Divider>\r\n\r\n                        <div className=\"card-container\">\r\n                            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\r\n                                <Col className=\"gutter-row\" span={6}>\r\n                                    <Card className=\"card-wrapper\" bordered={false}>\r\n                                        <Statistic\r\n                                            className=\"card-wrapper-statistic\"\r\n                                            title=\"Totale ricoverati\"\r\n                                            value={this.state.totWorldRecovered}\r\n                                            valueStyle={{color: '#ffaa00', textAlign: 'center'}}\r\n                                        />\r\n                                    </Card>\r\n                                </Col>                                \r\n                                <Col className=\"gutter-row\" span={6}>\r\n                                    <Card className=\"card-wrapper\" bordered={false}>\r\n                                        <Statistic\r\n                                            title=\"Deceduti\"\r\n                                            value={this.state.totWorldDeaths}\r\n                                            valueStyle={{color: '#adadad', textAlign: 'center' }}\r\n                                        />\r\n                                    </Card>\r\n                                </Col>\r\n                                <Col className=\"gutter-row\" span={6}>\r\n                                    <Card className=\"card-wrapper\" bordered={false} >\r\n                                        <Statistic\r\n                                            title=\"Totale casi\"\r\n                                            value={this.state.totWorldConfirmed}\r\n                                            valueStyle={{color: '#e60000', textAlign: 'center' }}\r\n                                        />\r\n                                    </Card>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n\r\n                        <div className=\"card-container\">\r\n                            <Row gutter={{xs: 8, sm: 16, md: 24, lg: 32}}>\r\n                                <Col className=\"gutter-row\" span={12}>\r\n                                    <Card className=\"card-wrapper\" bordered={false}>\r\n                                        <Table\r\n                                            dataSource={this.state.itemsWorls}\r\n                                            pagination={false}\r\n                                            layout=\"fixed\"\r\n                                            columns={columnsCountries}\r\n                                            bordered\r\n                                            size=\"middle\"\r\n                                            rowKey=\"country\"\r\n                                            scroll={{ y: 228 }} //456    \r\n                                        />\r\n                                    </Card>\r\n                                </Col>\r\n                             \r\n                            </Row>\r\n                        </div>                          \r\n                    </Content>\r\n                    <Footer>\r\n                        <span>© 2020 by <a href=\"https://github.com/Alberto75\" target=\"_blank\" rel=\"noopener noreferrer\">Albe</a> | </span>\r\n                        <a href=\"https://creativecommons.org/licenses/by/4.0/deed.en\" target=\"_blank\" rel=\"noopener noreferrer\">CC-BY-4.0</a>\r\n                        \r\n\r\n                        <div className=\"right\">\r\n                            Dataset COVID-19 Italia by{'\\u00A0'}\r\n                            <a href=\"https://github.com/pcm-dpc/COVID-19\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                Dipartimento della Protezione Civile\r\n                            </a>\r\n                            {'\\u00A0'}|{'\\u00A0'}\r\n                            Dataset COVID-19 Mondo by{'\\u00A0'}\r\n                            <a href=\"https://github.com/pomber/covid19\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n                                Pomber\r\n                            </a>\r\n                        </div>                        \r\n                    </Footer>\r\n                \r\n                </Layout>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport HttpsRedirect from 'react-https-redirect';\r\nimport Home from './components/home'\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <HttpsRedirect>\r\n          <Home/>\r\n      </HttpsRedirect>\r\n  </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}