{"version":3,"sources":["components/helpers.js","components/config.js","components/home.js","App.js","serviceWorker.js","index.js"],"names":["getPreviousDate","num","d","Date","setDate","getDate","month","getMonth","getFullYear","getCurrentTime","today","getHours","getMinutes","formatDate","date","getDataRegions","giorno","a","dataRegionsUrl","dataNationalUrl","dataProvincesUrl","dataWorldUrl","dataNoteUrl","dataRegioonsLatestUrl","axios","get","then","res","data","filter","obj","includes","getTopRegions","valore","result","dates","regione","totale_valore","bkColor","bordColor","sort","b","totale_positivi","slice","totale_ospedalizzati","deceduti","forEach","record","push","denominazione_regione","getDataProvinces","denominazione_provincia","getDataNational","dimessi_guariti","totale_casi","variazione_totale_positivi","tamponi","mese","nuoviPositivi","nuovi_positivi","getDataNotes","getDataCountries","fetch","response","json","worldData","country","confirmed","recovered","deaths","Object","keys","map","i","length","Content","Layout","Footer","Paragraph","Typography","TabPane","Tabs","home","props","state","startDate","moment","itemsRegions","itemsProvincies","itemsNotes","itemsWorls","totWorldConfirmed","totWorldRecovered","totWorldDeaths","totDimessi","totDeceduti","totCasi","totPositivi","totDimessiPrev","totDecedutiPrev","totCasiPrev","totPositiviPrev","varPositivi","varPositiviPrev","DataChart1","DataChart2","DataChart3","radarData","handleChange","bind","yesterday","toJSON","replace","sessionStorage","setItem","tot","setState","varTamponi","varTamponiPrev","labels","datasets","label","backgroundColor","borderColor","pointRadius","borderWidth","totalConfirmed","totalRecovered","totalDeaths","dateString","toString","format","subtract","e","target","value","columnsRegions","render","text","style","color","title","dataIndex","key","sorter","sortDirections","defaultSortOrder","columnsNotes","width","columnsCountries","className","position","zIndex","subTitle","extra","defaultValue","this","onChange","disabledDate","current","endOf","marginTop","orientation","gutter","xs","sm","md","lg","span","bordered","suffix","valueStyle","textAlign","strokeLinecap","strokeWidth","strokeColor","percent","toFixed","marginBottom","fontSize","defaultActiveKey","tab","dataSource","pagination","total","pageSize","hideOnSinglePage","layout","columns","size","rowKey","scroll","y","legend","display","options","scales","yAxes","ticks","min","max","stepSize","gridLines","borderDash","scaleLabel","xAxes","type","time","unit","unitStepSize","displayFormats","showHeader","Group","handleDataChange","right","Button","scale","angleLines","callback","backdropColor","href","rel","Component","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c1f607a4.chunk.js","sourcesContent":["import axios from \"axios\";\nimport {globalConfig} from \"./config\";\n\nexport function getPreviousDate(num) {\n    let d = new Date();\n    d.setDate(d.getDate() - num);\n    let month = d.getMonth() + 1;\n    return d.getFullYear() + '-' + (month < 10 ? '0' + month : '' + month) + '-' + (d.getDate() < 10 ? '0' + d.getDate() : '' + d.getDate());\n}\n\nexport function getCurrentTime() {\n    var today = new Date();\n    return (today.getHours() < 10 ? '0' + today.getHours() : + '' + today.getHours()) + \":\" + (today.getMinutes() < 10 ? '0' + today.getMinutes() : + '' + today.getMinutes());\n}\n\nexport function formatDate(date) {\n    let d = new Date(date);\n    let month = d.getMonth() + 1;\n    return (d.getDate() < 10 ? '0' + d.getDate() : '' + d.getDate()) + '/' + (month < 10 ? '0' + month : '' + month) + '/' + d.getFullYear();\n}\n\nexport async function getDataRegions(giorno) {\n    const {dataRegionsUrl} = globalConfig();\n\n    return axios.get(dataRegionsUrl)\n        .then(res => {\n            const obj = res.data;\n            return obj.filter(obj => obj.data.includes(giorno));\n        });\n}\n\nexport async function getTopRegions(valore) {\n    const {dataRegioonsLatestUrl} = globalConfig();\n    let result = [];\n    return axios.get(dataRegioonsLatestUrl)\n        .then(res => {\n            var obj = res.data;\n            let regione = [];  \n            let totale_valore = [];  \n            let bkColor = [];  \n            let bordColor = [];  \n            var sorted;\n            var dates;\n\n            if (valore === 'positivi') {\n                sorted = obj.sort((a, b) => b.totale_positivi - a.totale_positivi);\n                dates = sorted.slice(0,12)\n            } else if (valore === 'ricoverati') {\n                sorted = obj.sort((a, b) => b.totale_ospedalizzati - a.totale_ospedalizzati);\n                dates = sorted.slice(0,10)                   \n            } else if (valore === 'deceduti') {\n                sorted = obj.sort((a, b) => b.deceduti - a.deceduti);\n                dates = sorted.slice(0,12)                 \n            }\n\n            dates.forEach(record => {  \n                regione.push(record.denominazione_regione); \n                if (valore === 'positivi') {\n                    totale_valore.push(record.totale_positivi);\n                    bkColor.push('rgba(255, 170, 0, 0.2)')\n                    bordColor.push('rgba(255, 170, 0,1)')\n                } else if (valore === 'ricoverati') {\n                    totale_valore.push(record.totale_ospedalizzati);\n                    bkColor.push('rgba(230, 0, 0, 0.2)')\n                    bordColor.push('rgba(230, 0, 0, 1)')                    \n                } else if (valore === 'deceduti') {\n                    totale_valore.push(record.deceduti);\n                    bkColor.push('rgba(173, 173, 173, 0.2)')\n                    bordColor.push('rgba(173, 173, 173, 1)')                    \n                }\n                  \n            });                  \n            result.push(regione, totale_valore, bkColor, bordColor);\n            return result;            \n        });  \n}\n\nexport async function getDataProvinces(giorno) {\n    const {dataProvincesUrl} = globalConfig();\n\n    return axios.get(dataProvincesUrl)\n        .then(res => {\n            const obj = res.data;\n            return obj.filter(obj => obj.data.includes(giorno)).filter(obj => obj.denominazione_provincia !== 'In fase di definizione/aggiornamento');\n        });\n}\n\nexport async function getDataNational(giorno=0) {\n    const {dataNationalUrl} = globalConfig();\n    let result = [];\n    if (giorno !== 0) {\n        return axios.get(dataNationalUrl)\n            .then(res => {\n                const obj = res.data;\n                result.push(obj.filter(obj => obj.data.includes(giorno))[0].dimessi_guariti, obj.filter(obj => obj.data.includes(giorno))[0].deceduti, obj.filter(obj => obj.data.includes(giorno))[0].totale_casi, obj.filter(obj => obj.data.includes(giorno))[0].totale_positivi, obj.filter(obj => obj.data.includes(giorno))[0].variazione_totale_positivi, obj.filter(obj => obj.data.includes(giorno))[0].tamponi);\n                return result;\n            }); \n    } else {\n        return axios.get(dataNationalUrl)\n            .then(res => {\n                const obj = res.data;\n                let mese = [];  \n                let nuoviPositivi = [];   \n                let totale_positivi = [];  \n                let dimessi_guariti = [];  \n                let deceduti = [];\n                let tamponi = [];                                 \n                obj.forEach(record => {  \n                    mese.push(record.data);  \n                    nuoviPositivi.push(record.nuovi_positivi);  \n                    totale_positivi.push(record.totale_positivi);  \n                    dimessi_guariti.push(record.dimessi_guariti);  \n                    deceduti.push(record.deceduti);                      \n                    tamponi.push(record.tamponi);                      \n                });                  \n                result.push(mese, nuoviPositivi, totale_positivi, dimessi_guariti, deceduti, tamponi);\n                return result;\n            });        \n    }\n}\n\nexport async function getDataNotes() {\n    const {dataNoteUrl} = globalConfig();\n\n    return axios.get(dataNoteUrl)\n        .then(res => {\n            const obj = res.data;\n            return obj;\n        });\n}\n\nexport async function getDataCountries() {\n    const {dataWorldUrl} = globalConfig();\n    let result = [];\n\n    return fetch(dataWorldUrl)\n        .then(response => response.json())\n        .then(res => {\n            var worldData = { country: \"\", confirmed: 0, recovered: 0, deaths: 0 };\n            var worldArr = Object.keys(res).map(i => i);\n            \n            worldArr.forEach((country) => {\n                let obj = res[country];\n                obj = obj[obj.length - 1];\n                worldData = {\n                    country: country,\n                    confirmed: obj.confirmed,\n                    recovered: obj.recovered,\n                    deaths: obj.deaths,\n                }\n                result.push(worldData); \n            });     \n            return result;\n\n        });\n}\n\n","export function globalConfig() {\n    return {\n        dataNationalUrl: 'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-andamento-nazionale.json',\n        dataRegionsUrl: 'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-regioni.json',\n        dataProvincesUrl: 'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-province.json',\n        dataWorldUrl: 'https://pomber.github.io/covid19/timeseries.json',\n        dataNoteUrl: 'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-note.json',\n        dataRegioonsLatestUrl: 'https://raw.githubusercontent.com/pcm-dpc/COVID-19/master/dati-json/dpc-covid19-ita-regioni-latest.json'\n    }\n}\n","import React, { Component } from 'react';\n// eslint-disable-next-line \nimport { Layout, Radio, Row, Col, Table, Tabs, Card, Statistic, BackTop, Typography, Divider, Progress, DatePicker, PageHeader } from 'antd';\nimport { formatDate, getDataRegions, getDataProvinces, getDataNational, getCurrentTime, getPreviousDate, getDataNotes, getDataCountries, getTopRegions } from \"./helpers\";\n\nimport { Line, Radar } from 'react-chartjs-2';\nimport moment from 'moment';\n\nconst { Content, Footer } = Layout;\nconst { Paragraph } = Typography;\nconst { TabPane } = Tabs;\n\nexport default class home extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            startDate: moment(),\n            today: moment(),\n            itemsRegions: [],\n            itemsProvincies: [],\n            itemsNotes: [],\n            itemsWorls: [],\n            totWorldConfirmed: 0,\n            totWorldRecovered: 0,\n            totWorldDeaths: 0,            \n            totDimessi: 0,\n            totDeceduti: 0,\n            totCasi: 0,\n            totPositivi: 0,\n            totDimessiPrev: 0,\n            totDecedutiPrev: 0,\n            totCasiPrev: 0,\n            totPositiviPrev: 0,\n            varPositivi: 0,\n            varPositiviPrev: 0,\n            DataChart1: {},\n            DataChart2: {},\n            DataChart3: {},\n            radarData: 'positivi',\n        }\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    async componentDidMount() {\n        let today = null;\n        let yesterday = null;\n\n        if (getCurrentTime() < \"17:30\") {\n            today = getPreviousDate(1);\n            yesterday = getPreviousDate(2);\n        } else {\n            today = new Date().toJSON().slice(0, 10).replace(/-/g, '-');\n            yesterday = getPreviousDate(1);\n        }\n\n        sessionStorage.setItem(\"DATIAGGIORNATIAL\", formatDate(today));\n        \n        await getDataNational(today)\n            .then(tot => {\n                this.setState({\n                    totDimessi: tot[0],\n                    totDeceduti: tot[1],\n                    totCasi: tot[2],                    \n                    totPositivi: tot[3],\n                    varPositivi: tot[4],\n                    varTamponi: tot[5]\n                })\n            });\n\n        await getDataNational(yesterday)\n            .then(tot => {\n                this.setState({\n                    totDimessiPrev: tot[0],\n                    totDecedutiPrev: tot[1],\n                    totCasiPrev: tot[2],\n                    totPositiviPrev: tot[3],\n                    varPositiviPrev: tot[4],\n                    varTamponiPrev: tot[5]\n                })\n            });\n\n        await getDataRegions(today)\n            .then(data => {\n                this.setState({\n                    itemsRegions: data\n            })\n        });\n        \n        let radarData = 'positivi';\n        await getTopRegions(radarData)\n            .then(data => {\n                this.setState({\n                    DataChart3: {  \n                        labels: data[0],  \n                        datasets: [  \n                          {  \n                            label: 'Totale positivi',\n                            data: data[1],  \n                            backgroundColor: 'rgba(255, 170, 0, 0.2)',\n                            borderColor: 'rgba(255, 170, 0,1)',\n                            pointRadius: .5,\n                            borderWidth: 1.5,\n                          }  \n                        ]  \n                    }                     \n                })\n            });\n\n        await getDataProvinces(today)\n            .then(data => {\n                this.setState({\n                    itemsProvincies: data                   \n                })\n            }); \n\n        await getDataNational()\n            .then(tot => {\n                this.setState({\n                    DataChart1: {  \n                        labels: tot[0],  \n                        datasets: [  \n                          {  \n                            data: tot[1],  \n                            backgroundColor: 'rgba(255, 170, 0, 0.2)',\n                            borderColor: 'rgba(255, 170, 0,1)',\n                            pointRadius: .5,\n                            borderWidth: 1.5,\n                          }  \n                        ]  \n                    },\n                    DataChart2: {  \n                        labels: tot[0],  \n                        datasets: [  \n                            {  \n                                label: 'Totale positivi',\n                                data: tot[2],  \n                                backgroundColor: 'rgba(255, 170, 0, 0.2)',\n                                borderColor: 'rgba(255, 170, 0, 1)',\n                                pointRadius: .5,\n                                borderWidth: 1.5,\n                            },\n                            {  \n                                label: 'Dimessi Guariti',\n                                data: tot[3],  \n                                backgroundColor: 'rgba(76, 230, 0, 0.2)',\n                                borderColor: 'rgba(76, 230, 0, 1)',\n                                pointRadius: .5,\n                                borderWidth: 1.5,\n                            },\n                            {  \n                                label: 'Deceduti',\n                                data: tot[4],  \n                                backgroundColor: 'rgba(194, 194, 194, 0.2)',\n                                borderColor: 'rgba(194, 194, 194, 1)',\n                                pointRadius: .5,\n                                borderWidth: 1.5,\n                            }   \n                        ]  \n                    }                   \n                })\n            });         \n            \n        await getDataNotes(today)\n            .then(data => {\n                this.setState({\n                    itemsNotes: data\n                })\n            });\n           \n        await getDataCountries()\n            .then(data => {\n                    let totalConfirmed = 0;\n                    let totalRecovered = 0;\n                    let totalDeaths = 0;\n                    data.forEach(({ confirmed, recovered, deaths }) => {\n                      totalConfirmed += confirmed;\n                      totalRecovered += recovered;\n                      totalDeaths += deaths;\n                    });\n\n                this.setState({\n                    itemsWorls: data,\n                    totWorldConfirmed: totalConfirmed,\n                    totWorldRecovered: totalRecovered,\n                    totWorldDeaths: totalDeaths,\n                })\n            });\n            \n    }\n\n    handleChange(date, dateString) {\n        let today = dateString\n        let d = new Date();\n\n        if (d.getDate().toString() === date.format('D')) {\n            today = date.subtract(1, \"days\");\n            today = today.format(\"YYYY-MM-DD\");\n        }\n\n        getDataNational(today)\n            .then(tot => {\n                this.setState({\n                    totDimessi: tot[0],\n                    totDeceduti: tot[1],\n                    totCasi: tot[2],                    \n                    totPositivi: tot[3],\n                    varPositivi: tot[4],\n                    varTamponi: tot[5]\n                })\n            });\n\n        let yesterday = date.subtract(1, \"days\").format(\"YYYY-MM-DD\");\n\n        getDataNational(yesterday)\n            .then(tot => {\n                this.setState({\n                    totDimessiPrev: tot[0],\n                    totDecedutiPrev: tot[1],\n                    totCasiPrev: tot[2],\n                    totPositiviPrev: tot[3],\n                    varPositiviPrev: tot[4],\n                    varTamponiPrev: tot[5]\n                })\n            });\n        \n        getDataRegions(today)\n            .then(data => {\n                this.setState({\n                    itemsRegions: data\n                })\n            });\n        \n        getDataProvinces()\n            .then(data => {\n                this.setState({\n                    itemsProvincies: data\n                })\n            });        \n    }\n\n    handleDataChange(e) {\n        getTopRegions(e.target.value)\n            .then(data => {\n                this.setState({\n                    radarData: e.target.value,\n                    DataChart3: {  \n                        labels: data[0],  \n                        datasets: [  \n                        {  \n                            label: 'Totale ' + e.target.value,\n                            data: data[1],  \n                            backgroundColor: data[2],\n                            borderColor: data[3],\n                            pointRadius: .5,\n                            borderWidth: 1.5,\n                        }  \n                        ]  \n                    }                     \n                })\n            });\n\n    }\n\n    render() {\n        \n        const columnsRegions = [\n            {\n                render: text => <span style={{color: 'white'}}>{text}</span>,\n                title: 'Regione',\n                dataIndex: 'denominazione_regione',\n                key: 'denominazione_regione',\n                sorter: (a, b) => {\n                    if (a.denominazione_regione < b.denominazione_regione) {\n                        return -1;\n                    }\n                    if (a.denominazione_regione > b.denominazione_regione) {\n                        return 1;\n                    }\n                    //this.state.persons.sort(function(a, b){return b.totale_casi-a.totale_casi}\n                },\n                sortDirections: ['descend', 'ascend']\n            },\n            {\n                render: text => <span style={{color: '#e60000'}}>{text}</span>,\n                title: 'Totale casi',\n                dataIndex: 'totale_casi',\n                key: 'totale_casi',\n                defaultSortOrder: 'descend',\n                sorter: (a, b) => {\n                    if (a.totale_casi < b.totale_casi) {\n                        return -1;\n                    }\n                    if (a.totale_casi > b.totale_casi) {\n                        return 1;\n                    }\n                },\n                sortDirections: ['descend', 'ascend']\n            },\n            {\n                render: text => <span style={{color: '#ffaa00'}}>{text}</span>,\n                title: 'Totale positivi',\n                dataIndex: 'totale_positivi',\n                key: 'totale_positivi',\n                sorter: (a, b) => {\n                    if (a.totale_positivi < b.totale_positivi) {\n                        return -1;\n                    }\n                    if (a.totale_positivi > b.totale_positivi) {\n                        return 1;\n                    }\n                },\n                sortDirections: ['descend', 'ascend']\n            },\n            {\n                render: text => <span style={{color: '#ffaa00'}}>{text}</span>,\n                title: 'Nuovi positivi',\n                dataIndex: 'nuovi_positivi',\n                key: 'nuovi_positivi',\n                sorter: (a, b) => {\n                    if (a.nuovi_positivi < b.nuovi_positivi) {\n                        return -1;\n                    }\n                    if (a.nuovi_positivi > b.nuovi_positivi) {\n                        return 1;\n                    }\n                },\n                sortDirections: ['descend', 'ascend']\n            },\n            {\n                render: text => <span style={{color: '#4ce600'}}>{text}</span>,\n                title: 'Dimessi Guariti',\n                dataIndex: 'dimessi_guariti',\n                key: 'dimessi_guariti',\n                sorter: (a, b) => {\n                    if (a.dimessi_guariti < b.dimessi_guariti) {\n                        return -1;\n                    }\n                    if (a.dimessi_guariti > b.dimessi_guariti) {\n                        return 1;\n                    }\n                },\n                sortDirections: ['descend', 'ascend']\n            } ,\n            {\n                render: text => <span style={{color: '#adadad'}}>{text}</span>,\n                title: 'Deceduti',\n                dataIndex: 'deceduti',\n                key: 'deceduti',\n                sorter: (a, b) => {\n                    if (a.deceduti < b.deceduti) {\n                        return -1;\n                    }\n                    if (a.deceduti > b.deceduti) {\n                        return 1;\n                    }\n                },\n                sortDirections: ['descend', 'ascend']\n            } \n\n            // \n        ];\n\n        const columnsProvincies = [\n            {\n                title: 'Provincia',\n                dataIndex: 'denominazione_provincia',\n                key: 'denominazione_provincia',\n                sorter: (a, b) => {\n                    if (a.denominazione_provincia < b.denominazione_provincia) {\n                        return -1;\n                    }\n                    if (a.denominazione_provincia > b.denominazione_provincia) {\n                        return 1;\n                    }\n                },\n                sortDirections: ['descend', 'ascend']\n            },\n            {\n                title: 'Totale casi',\n                dataIndex: 'totale_casi',\n                defaultSortOrder: 'descend',\n                key: 'totale_casi',\n                sorter: (a, b) => {\n                    if (a.totale_casi < b.totale_casi) {\n                        return -1;\n                    }\n                    if (a.totale_casi > b.totale_casi) {\n                        return 1;\n                    }\n                },\n                sortDirections: ['descend', 'ascend']\n            }\n        ];         \n\n        const legend = {display:false}\n\n        const optionsChart1 = {\n            scales: {\n              yAxes: [{\n                ticks: { // \n                  min: 0, max: 45000, stepSize: 5000 },                                \n                gridLines: {\n                  color: \"rgb(84, 86, 89)\",\n                  borderDash: [2, 2],\n                },\n                scaleLabel: {\n                  display: true,\n                }\n              }],              \n                xAxes: [{\n                  gridLines: {\n                    color: \"rgb(84, 86, 89)\",\n                    borderDash: [2, 2],\n                  },                 \n                    type: 'time',\n                    time: {\n                      unit: 'month',\n                      unitStepSize: 1,                      \n                      displayFormats: {\n                        month: 'MMMM'\n                      }\n                  }\n                }]\n            }\n        }     \n\n        const optionsChart2 = {\n            legend: {\n                display: true,\n                position: 'bottom',\n\n              },            \n            scales: {\n              yAxes: [{\n                ticks: { // \n                  min: 0, max: 550000, stepSize: 50000 },                \n                gridLines: {\n                  color: \"rgb(84, 86, 89)\",\n                  borderDash: [2, 2],\n                },\n                scaleLabel: {\n                  display: true,\n                }\n              }],              \n                xAxes: [{\n                  gridLines: {\n                    color: \"rgb(84, 86, 89)\",\n                    borderDash: [2, 2],\n                  },                 \n                    type: 'time',\n                    time: {\n                      unit: 'month',\n                      unitStepSize: 1,                      \n                      displayFormats: {\n                        month: 'MMMM'\n                      }\n                  }\n                }]\n            }\n        } \n\n        const optionsChart3 = {\n            //startAngle: 90,\n            legend: {\n                display:false\n            },\n            title: {\n              display: false\n            },\n            scale: {\n                angleLines: {\n                    color: 'rgb(84, 86, 89)', // lines radiating from the center\n                    borderDash: [2, 2], \n                },\n                gridLines: {\n                    color: 'rgb(84, 86, 89)',\n                    borderDash: [2, 2],                 \n                  },                \n              ticks: {\n                callback: function() {return \"\"},\n                backdropColor: \"rgba(0, 0, 0, 0)\"\n              }\n            }\n        }\n\n        const columnsNotes = [\n            {\n                dataIndex: 'data',\n                defaultSortOrder: 'descend',\n                render: text => <span>{formatDate(text)}</span>,\n                key: 'data',\n                sorter: (a, b) => {\n                    if (a.data < b.data) {\n                        return -1;\n                    }\n                    if (a.data > b.data) {\n                        return 1;\n                    }\n                },\n                width: 100,\n            },\n            {\n                dataIndex: 'note',\n                key: 'note'\n            }\n        ];  \n        \n        const columnsCountries = [\n            {\n                render: text => <span style={{color: 'white'}}>{text}</span>,\n                title: 'Paese',\n                dataIndex: 'country',\n                key: 'country',\n                sorter: (a, b) => {\n                    if (a.country < b.country) {\n                        return -1;\n                    }\n                    if (a.country > b.country) {\n                        return 1;\n                    }\n                    //this.state.persons.sort(function(a, b){return b.totale_casi-a.totale_casi}\n                },\n                sortDirections: ['descend', 'ascend']\n            },\n            {\n                render: text => <span style={{color: '#e60000'}}>{text}</span>,\n                title: 'Totale confermati',\n                dataIndex: 'confirmed',\n                key: 'confirmed',\n                defaultSortOrder: 'descend',\n                sorter: (a, b) => {\n                    if (a.confirmed < b.confirmed) {\n                        return -1;\n                    }\n                    if (a.confirmed > b.confirmed) {\n                        return 1;\n                    }\n                },\n                sortDirections: ['descend', 'ascend']\n            },\n            {\n                render: text => <span style={{color: '#ffaa00'}}>{text}</span>,\n                title: 'Totale ricoverati',\n                dataIndex: 'recovered',\n                key: 'recovered',\n                sorter: (a, b) => {\n                    if (a.recovered < b.recovered) {\n                        return -1;\n                    }\n                    if (a.recovered > b.recovered) {\n                        return 1;\n                    }\n                },\n                sortDirections: ['descend', 'ascend']\n            },\n            {\n                render: text => <span style={{color: '#adadad'}}>{text}</span>,\n                title: 'Deceduti',\n                dataIndex: 'deaths',\n                key: 'deaths',\n                sorter: (a, b) => {\n                    if (a.deaths < b.deaths) {\n                        return -1;\n                    }\n                    if (a.deaths > b.deaths) {\n                        return 1;\n                    }\n                },\n                sortDirections: ['descend', 'ascend']\n            } \n\n            // \n        ]; \n\n        function disabledDate(current) {\n            // Can not select days before today and today\n            return current < moment('2020-02-25','YYYY-MM-DD') || current > moment().endOf('day');\n        }\n\n        return (\n            <div>\n                <BackTop />\n                <Layout className=\"layout\">\n                    <PageHeader style={{ position: 'fixed', zIndex: 1, width: '100%' }}\n                        className=\"site-page-header-responsive\"\n                        title=\"DATI COVID-19\"\n                        subTitle={\"Situazione Italia e Mondo\"} \n                        extra={[\n                            <span>Dati aggiornati al </span>,\n                            <DatePicker \n                                defaultValue={moment(this.state.today,'YYYY-MM-DD')}\n                                format={'YYYY-MM-DD'}\n                                onChange={this.handleChange} \n                                disabledDate={disabledDate}\n                                />,\n                        ]}                            \n                    />\n                    <Content className=\"site-layout\" style={{ marginTop: 75 }}>\n\n                        <Divider orientation=\"left\">Situazione Italia</Divider>\n\n                        <div className=\"card-container\">\n                            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                                <Col className=\"gutter-row\" span={6}>\n                                    <Card className=\"card-wrapper\" bordered={false}>\n                                        <Statistic\n                                            className=\"card-wrapper-statistic\"\n                                            title=\"Totale positivi\"\n                                            value={this.state.totPositivi}\n                                            suffix={<span> +{this.state.varPositivi}</span> }\n                                            valueStyle={{color: '#ffaa00', textAlign: 'center'}}\n                                        />\n                                        <Paragraph style={{textAlign: 'center'}}>\n                                            <Progress \n                                                strokeLinecap='square' \n                                                strokeWidth='15px'\n                                                strokeColor='#ffaa00' \n                                                percent={(this.state.totPositivi / this.state.totCasi * 100).toFixed(2)}\n                                            />\n                                        </Paragraph>\n                                    </Card>\n                                </Col>                                \n                                <Col className=\"gutter-row\" span={6}>\n                                    <Card className=\"card-wrapper\" bordered={false}>\n                                        <Statistic\n                                            title=\"Deceduti\"\n                                            value={this.state.totDeceduti}\n                                            suffix={<span> +{this.state.totDeceduti - this.state.totDecedutiPrev}</span> }\n                                            valueStyle={{color: '#adadad', textAlign: 'center' }}\n                                        />\n                                        <Paragraph style={{textAlign: 'center'}}>\n                                            <Progress \n                                                strokeLinecap='square' \n                                                strokeWidth='15px'\n                                                strokeColor='#adadad' \n                                                percent={(this.state.totDeceduti / this.state.totCasi * 100).toFixed(2)}\n                                            />\n                                        </Paragraph>\n                                    </Card>\n                                </Col>\n                                <Col className=\"gutter-row\" span={6}>\n                                    <Card className=\"card-wrapper\" bordered={false}>\n                                        <Statistic\n                                            title=\"Dimessi/Guariti\"\n                                            value={this.state.totDimessi}\n                                            suffix={<span> +{this.state.totDimessi - this.state.totDimessiPrev}</span> }\n                                            valueStyle={{color: '#4ce600', textAlign: 'center' }}\n                                        />\n                                        <Paragraph style={{textAlign: 'center'}}>\n                                            <Progress \n                                                strokeLinecap='square' \n                                                strokeWidth='15px'\n                                                strokeColor='#4ce600' \n                                                percent={(this.state.totDimessi / this.state.totCasi * 100).toFixed(2)} \n                                            />\n                                        </Paragraph>\n                                    </Card>\n                                </Col>\n                                <Col className=\"gutter-row\" span={6}>\n                                    <Card className=\"card-wrapper\" bordered={false} >\n                                        <Statistic\n                                            title=\"Totale casi\"\n                                            value={this.state.totCasi}\n                                            suffix={<div style={{textAlign: 'left'}}>\n                                                <p style={{marginBottom: '0.6em'}}> +{this.state.totCasi - this.state.totCasiPrev}</p> \n                                                <p style={{color: '#7c878e', fontSize: '12px'}}>Su {this.state.varTamponi - this.state.varTamponiPrev} Tamponi</p>\n                                            </div>}\n                                            valueStyle={{color: '#e60000', textAlign: 'center' }}\n                                        />\n                                        <Paragraph style={{textAlign: 'center'}}>\n                                        <Progress \n                                                strokeLinecap='square' \n                                                strokeWidth='15px'\n                                                strokeColor='#e60000' \n                                                percent={((this.state.totCasi - this.state.totCasiPrev) / (this.state.varTamponi - this.state.varTamponiPrev) * 100).toFixed(2)} \n                                            />\n                                        </Paragraph>\n                                    </Card>\n                                </Col>\n                            </Row>\n                        </div>\n\n                        <div className=\"card-container\">\n                            <Row gutter={{xs: 8, sm: 16, md: 24, lg: 32}}>\n                                <Col className=\"gutter-row\" span={8}>\n                                    <Card className=\"card-wrapper\" bordered={false}>\n                                        <Tabs  defaultActiveKey=\"1\">  \n                                            <TabPane tab=\"REGIONI\" key=\"1\">\n                                                <Table\n                                                    dataSource={this.state.itemsRegions}\n                                                    pagination={{\n                                                        total: this.state.itemsRegions.length,\n                                                        pageSize: this.state.itemsRegions.length,\n                                                        hideOnSinglePage: true\n                                                    }}\n                                                    layout=\"fixed\"\n                                                    columns={columnsRegions}\n                                                    bordered\n                                                    size=\"middle\"\n                                                    rowKey=\"codice_regione\"\n                                                    scroll={{ y: 203 }} //456\n                                                />\n                                            </TabPane>\n                                            <TabPane tab=\"PROVINCE\" key=\"2\">\n                                                <Table\n                                                    dataSource={this.state.itemsProvincies}\n                                                    pagination={{\n                                                        total: this.state.itemsProvincies.length,\n                                                        pageSize: this.state.itemsProvincies.length,\n                                                        hideOnSinglePage: true\n                                                    }}\n                                                    layout=\"fixed\"\n                                                    columns={columnsProvincies}\n                                                    bordered\n                                                    size=\"middle\"\n                                                    rowKey=\"codice_provincia\"\n                                                    scroll={{ y: 203 }}\n                                                />\n                                            </TabPane>\n                                        </Tabs>\n                                    </Card>\n                                </Col>\n                                <Col className=\"gutter-row\" span={8}>\n                                    <Card className=\"card-wrapper\" bordered={false} title=\"Nuovi positivi\">\n                                        <Line data={this.state.DataChart1} legend={legend} options={optionsChart1}/>\n                                    </Card>\n                                </Col>\n                                <Col className=\"gutter-row\" span={8}>\n                                    <Card className=\"card-wrapper\" bordered={false} title=\"Andamento nazionale\">\n                                        <Line data={this.state.DataChart2} options={optionsChart2}/>\n                                    </Card>\n                                </Col>                                \n                            </Row>\n                        </div>\n\n                        <div className=\"card-container\">\n                            <Row gutter={{xs: 8, sm: 16, md: 24, lg: 32}}>\n                                <Col className=\"gutter-row\" span={8}>\n                                    <Card className=\"card-wrapper\" bordered={false}>\n                                        <Table\n                                            dataSource={this.state.itemsNotes}\n                                            pagination={{\n                                                total: this.state.itemsNotes.length,\n                                                pageSize: this.state.itemsNotes.length,\n                                                hideOnSinglePage: true\n                                            }}\n                                            //layout=\"fixed\"\n                                            showHeader={false}\n                                            columns={columnsNotes}\n                                            bordered\n                                            title={() => 'Note'}\n                                            size=\"small\"\n                                            //rowKey=\"date\"\n                                            scroll={{ y: 320 }} //456\n                                        />\n                                    </Card>\n                                </Col>\n                                <Col className=\"gutter-row\" span={8}>\n                                    <Card className=\"card-wrapper\" bordered={false} title={<span>12 Regioni con il maggior numero di {this.state.radarData}</span> }>\n                                        <Radio.Group value={this.state.radarData} onChange={this.handleDataChange.bind(this)} style={{ right: '0px' }}>\n                                            <Radio.Button value=\"positivi\">Positivi</Radio.Button>\n                                            <Radio.Button value=\"ricoverati\">Ricoverati</Radio.Button>\n                                            <Radio.Button value=\"deceduti\">Deceduti</Radio.Button>\n                                        </Radio.Group>\n                                        <Radar data={this.state.DataChart3} options={optionsChart3}/>\n                                    </Card>\n                                </Col>                             \n                            </Row>\n                        </div>    \n                        \n                        <Divider orientation=\"left\">Situazione Mondiale</Divider>\n\n                        <div className=\"card-container\">\n                            <Row gutter={{ xs: 8, sm: 16, md: 24, lg: 32 }}>\n                                <Col className=\"gutter-row\" span={6}>\n                                    <Card className=\"card-wrapper\" bordered={false}>\n                                        <Statistic\n                                            className=\"card-wrapper-statistic\"\n                                            title=\"Totale ricoverati\"\n                                            value={this.state.totWorldRecovered}\n                                            valueStyle={{color: '#ffaa00', textAlign: 'center'}}\n                                        />\n                                    </Card>\n                                </Col>                                \n                                <Col className=\"gutter-row\" span={6}>\n                                    <Card className=\"card-wrapper\" bordered={false}>\n                                        <Statistic\n                                            title=\"Deceduti\"\n                                            value={this.state.totWorldDeaths}\n                                            valueStyle={{color: '#adadad', textAlign: 'center' }}\n                                        />\n                                    </Card>\n                                </Col>\n                                <Col className=\"gutter-row\" span={6}>\n                                    <Card className=\"card-wrapper\" bordered={false} >\n                                        <Statistic\n                                            title=\"Totale casi\"\n                                            value={this.state.totWorldConfirmed}\n                                            valueStyle={{color: '#e60000', textAlign: 'center' }}\n                                        />\n                                    </Card>\n                                </Col>\n                            </Row>\n                        </div>\n\n                        <div className=\"card-container\">\n                            <Row gutter={{xs: 8, sm: 16, md: 24, lg: 32}}>\n                                <Col className=\"gutter-row\" span={12}>\n                                    <Card className=\"card-wrapper\" bordered={false}>\n                                        <Table\n                                            dataSource={this.state.itemsWorls}\n                                            pagination={false}\n                                            layout=\"fixed\"\n                                            columns={columnsCountries}\n                                            bordered\n                                            size=\"middle\"\n                                            rowKey=\"country\"\n                                            scroll={{ y: 228 }} //456    \n                                        />\n                                    </Card>\n                                </Col>\n                             \n                            </Row>\n                        </div>                          \n                    </Content>\n                    <Footer>\n                        <span>© 2020 by <a href=\"https://github.com/Alberto75\" target=\"_blank\" rel=\"noopener noreferrer\">Albe</a> | </span>\n                        <a href=\"https://creativecommons.org/licenses/by/4.0/deed.en\" target=\"_blank\" rel=\"noopener noreferrer\">CC-BY-4.0</a>\n                        \n\n                        <div className=\"right\">\n                            Dataset COVID-19 Italia by{'\\u00A0'}\n                            <a href=\"https://github.com/pcm-dpc/COVID-19\" target=\"_blank\" rel=\"noopener noreferrer\">\n                                Dipartimento della Protezione Civile\n                            </a>\n                            {'\\u00A0'}|{'\\u00A0'}\n                            Dataset COVID-19 Mondo by{'\\u00A0'}\n                            <a href=\"https://github.com/pomber/covid19\" target=\"_blank\" rel=\"noopener noreferrer\">\n                                Pomber\n                            </a>\n                        </div>                        \n                    </Footer>\n                \n                </Layout>\n            </div>\n        );\n    }\n}\n","import React from 'react';\nimport HttpsRedirect from 'react-https-redirect';\nimport Home from './components/home'\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <HttpsRedirect>\n          <Home/>\n      </HttpsRedirect>\n  </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}